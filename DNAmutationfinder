#!/usr/bin/env python2.7

import sys
import simplediff
from itertools import izip_longest

DEBUG = False

codons = {
    'ttt': 'F', 'ttc': 'F',
    'tta': 'L', 'ttg': 'L', 'ctt': 'L', 'ctc': 'L', 'cta': 'L', 'ctg': 'L',
    'att': 'I', 'atc': 'I', 'ata': 'I',
    'atg': 'M',
    'gtt': 'V', 'gtc': 'V', 'gta': 'V', 'gtg': 'V',
    'tct': 'S', 'tcc': 'S', 'tca': 'S', 'tcg': 'S',
    'cct': 'P', 'ccc': 'P', 'cca': 'P', 'ccg': 'P',
    'act': 'T', 'acc': 'T', 'aca': 'T', 'acg': 'T',
    'gct': 'A', 'gcc': 'A', 'gca': 'A', 'gcg': 'A',
    'tat': 'Y', 'tac': 'Y',
    'taa': '-', 'tag': '-',
    'cat': 'H', 'cac': 'H',
    'caa': 'Q', 'cag': 'Q',
    'aat': 'N', 'aac': 'N',
    'aaa': 'K', 'aag': 'K',
    'gat': 'D', 'gac': 'D',
    'gaa': 'E', 'gag': 'E',
    'tgt': 'C', 'tgc': 'C',
    'tga': '-',
    'tgg': 'W',
    'cgt': 'R', 'cgc': 'R', 'cga': 'R', 'cgg': 'R',
    'agt': 'S', 'agc': 'S',
    'aga': 'R', 'agg': 'R',
    'ggt': 'G', 'ggc': 'G', 'gga': 'G', 'ggg': 'G',
}

def grouper(iterable, n, fillvalue=None):
    """Returns iterable grouped into n sized chunks"""
    args = [iter(iterable)] * n
    return izip_longest(*args, fillvalue=fillvalue)

def load_data(file_):
    """Extract the useful data from the file"""
    lines = []
    for line in  open(file_):
        line = line.lower().strip()
        # the data should only contain the characters tacgn, throw other lines away
        if any(char not in 'tacgn' for char in line):
            continue
        lines.append(line)
    return ''.join(lines)

def get_change(diff, base, comp):
    tag, val, index = diff
    amino_index = index - (index % 3)
    orig_amino = codons.get(base[amino_index:amino_index+3])
    new_amino = codons.get(comp[amino_index:amino_index+3])
    if tag == 'r':
        return '{}{}{} {}{}{}'.format(val[0], index + 1, val[1], orig_amino, index/3 + 1, new_amino)
    if tag == '-':
        return '{}{} {}{}{}'.format(val, index + 1, orig_amino, index/3 + 1, new_amino)
    if tag == '+':
        return '{}{} {}{}{}'.format(index + 1, val, orig_amino, index/3 + 1, new_amino)

def index_diffs(diffs):
    """Figure out the index of each diff"""
    indexed_diffs = []
    index = 0
    for diff in diffs:
        if diff[0] == '+' and indexed_diffs[-1][0] == '-':
            indexed_diffs[-1] = ('r', (indexed_diffs[-1][1], diff[1]), index)
            index += len(diff[1])
        elif diff[0] in '=+':
            indexed_diffs.append((diff[0], diff[1], index))
            index += len(diff[1])
        else:
            indexed_diffs.append((diff[0], diff[1], index))
    return indexed_diffs

def main():
    """Compare the first argument (base file) to every other argument"""
    base_file = sys.argv[1]
    for comp_file in sys.argv[2:]:
        compare(base_file, comp_file)

def compare(base_file, comp_file):
    """Compare two files"""
    print '{} - {}'.format(base_file, comp_file)

    base = load_data(base_file)
    comp = load_data(comp_file)

    diffs = simplediff.diff(base, comp)

    if diffs[0][0] != '+':
        print 'Error: header not found'
        exit()
    else:
        # lop off that junk
        new_comp = comp[len(diffs[0][1]):]

    # lop off initial junk from diffs, final junk
    indexed_diffs = index_diffs(diffs[1:-1])
    if DEBUG:
        print diffs
        print indexed_diffs

    # not interested in equals
    diff_iter = iter(diff for diff in indexed_diffs if diff[0] != '=')
    next_diff = diff_iter.next()

    print '             base:    comp:'
    for i, genes in enumerate(zip(grouper(base, 3), grouper(new_comp, 3))):
        base_gene = ''.join(genes[0])
        comp_gene = ''.join(genes[1])

        if next_diff and (3*i) <= next_diff[2] <= (3*i+2):
            change = get_change(next_diff, base, new_comp)
            try:
                next_diff = diff_iter.next()
            except StopIteration:
                next_diff = None
        else:
            change = ''

        print '({:3d}| {:3d} - {:3d}). {}: {}   {}: {:4s} {}'.format(
            i+1, 3*i+1, 3*i+2+1, base_gene, codons.get(base_gene),
            comp_gene, codons.get(comp_gene), change)
    print
    print comp_file
    print

    for diff in indexed_diffs:
        change = get_change(diff, base, new_comp)
        if change:
            print change

    print

main()
